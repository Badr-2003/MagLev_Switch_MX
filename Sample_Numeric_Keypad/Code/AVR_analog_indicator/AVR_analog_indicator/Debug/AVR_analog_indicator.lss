
AVR_analog_indicator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000680  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000259  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b2  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  0000152a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001552  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 cc 00 	jmp	0x198	; 0x198 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
//#include <util/delay.h>


int main(void)
{
	DDRC	= 0b00111110;
  80:	8e e3       	ldi	r24, 0x3E	; 62
  82:	87 b9       	out	0x07, r24	; 7
	DDRD	= 0b00011111;
  84:	8f e1       	ldi	r24, 0x1F	; 31
  86:	8a b9       	out	0x0a, r24	; 10
	PORTC	= 0b00000000;;
  88:	18 b8       	out	0x08, r1	; 8
	
	ADMUX	|= (1 << REFS0);// | (0 << REFS1);
  8a:	ec e7       	ldi	r30, 0x7C	; 124
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	80 64       	ori	r24, 0x40	; 64
  92:	80 83       	st	Z, r24
	ADCSRA	|= (1 << ADEN) | (1 << ADATE) | (0 << ADPS2) | (0 << ADPS1) | (0 << ADPS0);// 0b10000111;
  94:	ea e7       	ldi	r30, 0x7A	; 122
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 6a       	ori	r24, 0xA0	; 160
  9c:	80 83       	st	Z, r24
	ADCSRB	&= 0b11010000;
  9e:	ab e7       	ldi	r26, 0x7B	; 123
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	8c 91       	ld	r24, X
  a4:	80 7d       	andi	r24, 0xD0	; 208
  a6:	8c 93       	st	X, r24
	ADCSRA	|= (1 << ADSC);
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
    while (1) 
    {
		//PORTC = 0b00111110; // All ON
		//PORTD = 0b00011111; // All ON
		
		if(ADCSRA & (1 << ADIF)){
  ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	84 ff       	sbrs	r24, 4
  b4:	fc cf       	rjmp	.-8      	; 0xae <main+0x2e>
			val = ADC;
  b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
			
			if(val >= 1000){
  be:	88 3e       	cpi	r24, 0xE8	; 232
  c0:	23 e0       	ldi	r18, 0x03	; 3
  c2:	92 07       	cpc	r25, r18
  c4:	20 f0       	brcs	.+8      	; 0xce <main+0x4e>
				PORTD = PORTD | LED10;
  c6:	2b b1       	in	r18, 0x0b	; 11
  c8:	20 61       	ori	r18, 0x10	; 16
  ca:	2b b9       	out	0x0b, r18	; 11
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <main+0x54>
			}
			else{
				PORTD = PORTD & LED10;
  ce:	2b b1       	in	r18, 0x0b	; 11
  d0:	20 71       	andi	r18, 0x10	; 16
  d2:	2b b9       	out	0x0b, r18	; 11
			}
			if(val >= 900){
  d4:	84 38       	cpi	r24, 0x84	; 132
  d6:	23 e0       	ldi	r18, 0x03	; 3
  d8:	92 07       	cpc	r25, r18
  da:	20 f0       	brcs	.+8      	; 0xe4 <main+0x64>
				PORTD = PORTD | LED09;
  dc:	2b b1       	in	r18, 0x0b	; 11
  de:	28 60       	ori	r18, 0x08	; 8
  e0:	2b b9       	out	0x0b, r18	; 11
  e2:	03 c0       	rjmp	.+6      	; 0xea <main+0x6a>
			}
			else{
				PORTD = PORTD & LED09;
  e4:	2b b1       	in	r18, 0x0b	; 11
  e6:	28 70       	andi	r18, 0x08	; 8
  e8:	2b b9       	out	0x0b, r18	; 11
			}
			if(val >= 800){
  ea:	80 32       	cpi	r24, 0x20	; 32
  ec:	23 e0       	ldi	r18, 0x03	; 3
  ee:	92 07       	cpc	r25, r18
  f0:	20 f0       	brcs	.+8      	; 0xfa <main+0x7a>
				PORTD = PORTD | LED08;
  f2:	2b b1       	in	r18, 0x0b	; 11
  f4:	24 60       	ori	r18, 0x04	; 4
  f6:	2b b9       	out	0x0b, r18	; 11
  f8:	03 c0       	rjmp	.+6      	; 0x100 <main+0x80>
			}
			else{
				PORTD = PORTD & LED08;
  fa:	2b b1       	in	r18, 0x0b	; 11
  fc:	24 70       	andi	r18, 0x04	; 4
  fe:	2b b9       	out	0x0b, r18	; 11
			}
			if(val >= 700){
 100:	8c 3b       	cpi	r24, 0xBC	; 188
 102:	22 e0       	ldi	r18, 0x02	; 2
 104:	92 07       	cpc	r25, r18
 106:	20 f0       	brcs	.+8      	; 0x110 <main+0x90>
				PORTD = PORTD | LED07;
 108:	2b b1       	in	r18, 0x0b	; 11
 10a:	22 60       	ori	r18, 0x02	; 2
 10c:	2b b9       	out	0x0b, r18	; 11
 10e:	03 c0       	rjmp	.+6      	; 0x116 <main+0x96>
			}
			else{
				PORTD = PORTD & LED07;
 110:	2b b1       	in	r18, 0x0b	; 11
 112:	22 70       	andi	r18, 0x02	; 2
 114:	2b b9       	out	0x0b, r18	; 11
			}
			if(val >= 600){
 116:	88 35       	cpi	r24, 0x58	; 88
 118:	22 e0       	ldi	r18, 0x02	; 2
 11a:	92 07       	cpc	r25, r18
 11c:	20 f0       	brcs	.+8      	; 0x126 <main+0xa6>
				PORTD = PORTD | LED06;
 11e:	2b b1       	in	r18, 0x0b	; 11
 120:	21 60       	ori	r18, 0x01	; 1
 122:	2b b9       	out	0x0b, r18	; 11
 124:	03 c0       	rjmp	.+6      	; 0x12c <main+0xac>
			}
			else{
				PORTD = PORTD & LED06;
 126:	2b b1       	in	r18, 0x0b	; 11
 128:	21 70       	andi	r18, 0x01	; 1
 12a:	2b b9       	out	0x0b, r18	; 11
			}
			if(val >= 500){
 12c:	84 3f       	cpi	r24, 0xF4	; 244
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	92 07       	cpc	r25, r18
 132:	20 f0       	brcs	.+8      	; 0x13c <main+0xbc>
				PORTC = PORTC | LED05;
 134:	28 b1       	in	r18, 0x08	; 8
 136:	20 62       	ori	r18, 0x20	; 32
 138:	28 b9       	out	0x08, r18	; 8
 13a:	03 c0       	rjmp	.+6      	; 0x142 <main+0xc2>
			}
			else{
				PORTC = PORTC & LED05;
 13c:	28 b1       	in	r18, 0x08	; 8
 13e:	20 72       	andi	r18, 0x20	; 32
 140:	28 b9       	out	0x08, r18	; 8
			}
			if(val >= 400){
 142:	80 39       	cpi	r24, 0x90	; 144
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	92 07       	cpc	r25, r18
 148:	20 f0       	brcs	.+8      	; 0x152 <main+0xd2>
				PORTC = PORTC | LED04;
 14a:	28 b1       	in	r18, 0x08	; 8
 14c:	20 61       	ori	r18, 0x10	; 16
 14e:	28 b9       	out	0x08, r18	; 8
 150:	03 c0       	rjmp	.+6      	; 0x158 <main+0xd8>
			}
			else{
				PORTC = PORTC & LED04;
 152:	28 b1       	in	r18, 0x08	; 8
 154:	20 71       	andi	r18, 0x10	; 16
 156:	28 b9       	out	0x08, r18	; 8
			}
			if(val >= 300){
 158:	8c 32       	cpi	r24, 0x2C	; 44
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	92 07       	cpc	r25, r18
 15e:	20 f0       	brcs	.+8      	; 0x168 <main+0xe8>
				PORTC = PORTC | LED03;
 160:	28 b1       	in	r18, 0x08	; 8
 162:	28 60       	ori	r18, 0x08	; 8
 164:	28 b9       	out	0x08, r18	; 8
 166:	03 c0       	rjmp	.+6      	; 0x16e <main+0xee>
			}
			else{
				PORTC = PORTC & LED03;
 168:	28 b1       	in	r18, 0x08	; 8
 16a:	28 70       	andi	r18, 0x08	; 8
 16c:	28 b9       	out	0x08, r18	; 8
			}
			if(val >= 200){
 16e:	88 3c       	cpi	r24, 0xC8	; 200
 170:	91 05       	cpc	r25, r1
 172:	20 f0       	brcs	.+8      	; 0x17c <main+0xfc>
				PORTC = PORTC | LED02;
 174:	28 b1       	in	r18, 0x08	; 8
 176:	24 60       	ori	r18, 0x04	; 4
 178:	28 b9       	out	0x08, r18	; 8
 17a:	03 c0       	rjmp	.+6      	; 0x182 <main+0x102>
			}
			else{
				PORTC = PORTC & LED02;
 17c:	28 b1       	in	r18, 0x08	; 8
 17e:	24 70       	andi	r18, 0x04	; 4
 180:	28 b9       	out	0x08, r18	; 8
			}
			if(val >= 100){
 182:	84 36       	cpi	r24, 0x64	; 100
 184:	91 05       	cpc	r25, r1
 186:	20 f0       	brcs	.+8      	; 0x190 <main+0x110>
				PORTC = PORTC | LED01;
 188:	88 b1       	in	r24, 0x08	; 8
 18a:	82 60       	ori	r24, 0x02	; 2
 18c:	88 b9       	out	0x08, r24	; 8
 18e:	8f cf       	rjmp	.-226    	; 0xae <main+0x2e>
			}
			else{
				PORTC = PORTC & LED01;
 190:	88 b1       	in	r24, 0x08	; 8
 192:	82 70       	andi	r24, 0x02	; 2
 194:	88 b9       	out	0x08, r24	; 8
 196:	8b cf       	rjmp	.-234    	; 0xae <main+0x2e>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
